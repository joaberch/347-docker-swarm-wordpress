version: '3.8' #compose version

services:
  db:
    image: mariadb:11.2
    volumes:
    #Named volume to persist data in /var/lib/mysql
      - db_data:/var/lib/mysql
    command: '--default-authentication-plugin=mysql_native_password' #Use authentication plugin
    networks:
      - backend #Use a network to connect with nginx
    ports:
      - 3306:3306 #Expose port to have external connection
    environment:
      MYSQL_ROOT_PASSWORD: /run/secrets/DB_ROOT_PWD #Defined in another file
      MYSQL_DATABASE: wordpress #Name of the database
      MYSQL_USER: wordpress #Name of the user
      MYSQL_PASSWORD: /run/secrets/DB_PWD #Defined in another file
    deploy:
      mode: replicated #Replicate the service a certain number of time
      replicas: 1 #Replicate one time
    secrets:
      - DB_PWD #Define secret for user password
      - DB_ROOT_PWD #Define secret for root passwor

  wordpress:
    #fpm image works with nginx
    image: wordpress:6.6.1-fpm-alpine
    depends_on: #Wait for the database to start before starting
      - db
    volumes: #Use a named volume to persist data in /var/www/html, prevent auto copy from inital file
      - wordpress_data:/var/www/html:nocopy
    networks: #Use a network to communicate with nginx
      - frontend
    environment:
      WORDPRESS_DB_HOST: 172.26.0.33:3306 #Define the IP adress and the port of the database service
      WORDPRESS_DB_USER: wordpress #Name of the user
      WORDPRESS_DB_PASSWORD_FILE: /run/secrets/DB_PWD #Define user password in another file, same as the db password
      WORDPRESS_DB_NAME: wordpress #Name of the database used by wordpress
    deploy:
      mode: replicated #Replicate the service a certain number of time
      replicas: 1 #Replicate one time
    secrets:
      - DB_PWD #Define secret password for user
      - DB_ROOT_PWD #Define secret password for root user
      - WP_PWD #Define secret wordpress password

  nginx:
    image: nginx:1.27.1-alpine3.20
    ports:
      - "80:80" #Expose a port to access from outside (*ip*:80)
    volumes:
      - wordpress_data:/var/www/html #Named volume so that nginx can access site files
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro #Mounts a configuration file in read only
    depends_on: #Wait for the wordpress service before starting (db->wordpress->nginx)
      - wordpress
    networks:
      - frontend #To interact with wordpress
      - backend #To interact with mariadb
    deploy:
      mode: replicated #Replicate the service a certain number of time
      replicas: 1 #Replicate one time
      placement:
        constraints: [node.role == manager] #Place nginx only on the manager node in Swarm so that the configuration file is accessible everywhere

networks:
  frontend:
    driver: overlay #Use an overlay network to interact between wordpress and nginx host
  backend:
    driver: overlay #Use an overlay network to interact between mariadb and nginx host

volumes:
  wordpress_data:
    driver: local #Use a local volume to stock wordpress' file
    driver_opts:
      type: "nfs" #Use nfs protocol for the shared volume
      o: "addr=172.26.1.5,nolock,soft,rw" #Specify address, nolock and soft ensure that docker doesn't freeze if the connection to the NFS is lost
      device: ":/var/nfs_share/srv13" #Path for the nfs to mount
  db_data:

secrets:
  DB_PWD:
    file: ./db_pwd.txt #Define secret file for the user's password of mariadb service
  DB_ROOT_PWD:
    file: ./db_root_pwd.txt #Define secret file for the root password of mariadb service
  WP_PWD:
    file: ./wp_pwd.txt #Define secret file for the password of wordpress service
